// <auto-generated />
using System;
using LogiTrack.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogiTrack.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241031134511_SeedDataInNewDb")]
    partial class SeedDataInNewDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlternativePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Company's alternative phone number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Company's city");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Person whom we are contacting");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Company's country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Registration created at");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Company's industry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Company Name");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Company's postal code");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasComment("Company's registration number");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Company's registration status");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Company's address");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ClientCompanies");

                    b.HasComment("Client Company Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlternativePhoneNumber = "1234567891",
                            City = "Sliven",
                            ContactPerson = "John Doe",
                            Country = "Bulgaria",
                            CreatedAt = new DateTime(2024, 10, 11, 15, 45, 9, 177, DateTimeKind.Local).AddTicks(9651),
                            Industry = "Manufacturing",
                            Name = "Client Company 1",
                            PostalCode = "8800",
                            RegistrationNumber = "REG123456",
                            RegistrationStatus = "Approved",
                            Street = "Sini kamani 28",
                            UserId = "20450cff-816f-49c8-9546-1c603aec0301"
                        },
                        new
                        {
                            Id = 2,
                            AlternativePhoneNumber = "9876543210",
                            City = "Sofia",
                            ContactPerson = "Jane Smith",
                            Country = "Bulgaria",
                            CreatedAt = new DateTime(2024, 10, 21, 15, 45, 9, 177, DateTimeKind.Local).AddTicks(9682),
                            Industry = "Fashion",
                            Name = "Client Company 2",
                            PostalCode = "1000",
                            RegistrationNumber = "REG654321",
                            RegistrationStatus = "Pending",
                            Street = "Osogovo 5a"
                        });
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("Invoice identifier");

                    b.Property<int?>("ClientCompanyId1")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasComment("Delivery identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Invoice description");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("File identifier in Google drive");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2")
                        .HasComment("Invoice date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Invoice number");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasComment("Is invoice paid");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId1");

                    b.ToTable("Invoices");

                    b.HasComment("Invoice Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryId = 1,
                            Description = "Invoice for Delivery 1",
                            FileId = "",
                            InvoiceDate = new DateTime(2024, 10, 21, 15, 45, 9, 185, DateTimeKind.Local).AddTicks(6536),
                            InvoiceNumber = "INV001",
                            IsPaid = true
                        },
                        new
                        {
                            Id = 2,
                            DeliveryId = 2,
                            Description = "Invoice for Delivery 2",
                            FileId = "",
                            InvoiceDate = new DateTime(2024, 10, 22, 15, 45, 9, 185, DateTimeKind.Local).AddTicks(6540),
                            InvoiceNumber = "INV002",
                            IsPaid = false
                        },
                        new
                        {
                            Id = 3,
                            DeliveryId = 3,
                            Description = "Invoice for Delivery 3",
                            FileId = "",
                            InvoiceDate = new DateTime(2024, 10, 23, 15, 45, 9, 185, DateTimeKind.Local).AddTicks(6542),
                            InvoiceNumber = "INV003",
                            IsPaid = true
                        },
                        new
                        {
                            Id = 4,
                            DeliveryId = 4,
                            Description = "Invoice for Delivery 4",
                            FileId = "",
                            InvoiceDate = new DateTime(2024, 10, 24, 15, 45, 9, 185, DateTimeKind.Local).AddTicks(6543),
                            InvoiceNumber = "INV004",
                            IsPaid = false
                        },
                        new
                        {
                            Id = 5,
                            DeliveryId = 5,
                            Description = "Invoice for Delivery 5",
                            FileId = "",
                            InvoiceDate = new DateTime(2024, 10, 25, 15, 45, 9, 185, DateTimeKind.Local).AddTicks(6545),
                            InvoiceNumber = "INV005",
                            IsPaid = true
                        });
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClientCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int")
                        .HasComment("Delivery identifier");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Company identifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Notes for the offer");

                    b.Property<DateTime>("OfferDate")
                        .HasColumnType("datetime2")
                        .HasComment("Offer date");

                    b.Property<string>("OfferStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Offer status");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasComment("Request identifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.HasIndex("DeliveryId")
                        .HasDatabaseName("IX_Offer_DeliveryId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasDatabaseName("IX_Offer_RequestId");

                    b.ToTable("Offers");

                    b.HasComment("Offer Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FinalPrice = 1200.0m,
                            Notes = "Initial offer for Request 1",
                            OfferDate = new DateTime(2024, 10, 21, 15, 45, 9, 191, DateTimeKind.Local).AddTicks(4873),
                            OfferStatus = "Pending",
                            RequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            FinalPrice = 1500.0m,
                            Notes = "Offer accepted for Request 2",
                            OfferDate = new DateTime(2024, 10, 23, 15, 45, 9, 191, DateTimeKind.Local).AddTicks(4874),
                            OfferStatus = "Approved",
                            RequestId = 2
                        },
                        new
                        {
                            Id = 3,
                            FinalPrice = 1800.0m,
                            Notes = "Offer approved for Request 3",
                            OfferDate = new DateTime(2024, 10, 26, 15, 45, 9, 191, DateTimeKind.Local).AddTicks(4876),
                            OfferStatus = "Approved",
                            RequestId = 3
                        },
                        new
                        {
                            Id = 4,
                            FinalPrice = 2100.0m,
                            Notes = "Approved offer for Request 4",
                            OfferDate = new DateTime(2024, 10, 29, 15, 45, 9, 191, DateTimeKind.Local).AddTicks(4877),
                            OfferStatus = "Approved",
                            RequestId = 4
                        },
                        new
                        {
                            Id = 5,
                            FinalPrice = 2300.0m,
                            Notes = "Finalized offer for Request 5",
                            OfferDate = new DateTime(2024, 10, 31, 15, 45, 9, 191, DateTimeKind.Local).AddTicks(4879),
                            OfferStatus = "Accepted",
                            RequestId = 5
                        });
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Request identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("ApproximatePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Approximate price given by the company");

                    b.Property<decimal>("CalculatedPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Automatically calculated price");

                    b.Property<string>("CargoType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Cargo type");

                    b.Property<int>("ClientCompanyId")
                        .HasColumnType("int")
                        .HasComment("Client Company identifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Delivery address");

                    b.Property<double>("DeliveryLatitude")
                        .HasColumnType("float")
                        .HasComment("Delivery address latitude");

                    b.Property<double>("DeliveryLongitude")
                        .HasColumnType("float")
                        .HasComment("Delivery address longitude");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2")
                        .HasComment("Expected delivery date");

                    b.Property<bool>("IsRefrigerated")
                        .HasColumnType("bit")
                        .HasComment("Is the cargo refrigerated");

                    b.Property<double>("Kilometers")
                        .HasColumnType("float");

                    b.Property<int?>("NumberOfNonStandartGoods")
                        .HasColumnType("int")
                        .HasComment("Number of non-standart goods");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    b.Property<string>("PickupAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Pickup address");

                    b.Property<double>("PickupLatitude")
                        .HasColumnType("float")
                        .HasComment("Pickup address latitude");

                    b.Property<double>("PickupLongitude")
                        .HasColumnType("float")
                        .HasComment("Pickup address longitude");

                    b.Property<bool>("SharedTruck")
                        .HasColumnType("bit")
                        .HasComment("Will the vehicle be shared or no");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Special instructions");

                    b.Property<int>("StandartCargoId")
                        .HasColumnType("int")
                        .HasComment("Standart cargo identifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Status of the request");

                    b.Property<double>("TotalVolume")
                        .HasColumnType("float");

                    b.Property<double>("TotalWeight")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Type of the request");

                    b.Property<string>("TypeOfGoods")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type of goods");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.ToTable("Requests");

                    b.HasComment("Request Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApproximatePrice = 500m,
                            CalculatedPrice = 450m,
                            CargoType = "Standard",
                            ClientCompanyId = 1,
                            CreatedAt = new DateTime(2024, 10, 31, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5123),
                            DeliveryAddress = "456 Delivery St.",
                            DeliveryLatitude = 42.697699999999998,
                            DeliveryLongitude = 23.321899999999999,
                            ExpectedDeliveryDate = new DateTime(2024, 11, 7, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5120),
                            IsRefrigerated = false,
                            Kilometers = 500.0,
                            PickupAddress = "123 Pickup St.",
                            PickupLatitude = 42.697699999999998,
                            PickupLongitude = 23.321899999999999,
                            SharedTruck = false,
                            SpecialInstructions = "Handle with care",
                            StandartCargoId = 0,
                            Status = "Pending",
                            TotalVolume = 12.0,
                            TotalWeight = 300.0,
                            Type = "Domestic",
                            TypeOfGoods = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            ApproximatePrice = 1200m,
                            CalculatedPrice = 1150m,
                            CargoType = "Standard",
                            ClientCompanyId = 1,
                            CreatedAt = new DateTime(2024, 10, 31, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5129),
                            DeliveryAddress = "123 Delivery Ave.",
                            DeliveryLatitude = 41.878100000000003,
                            DeliveryLongitude = -87.629800000000003,
                            ExpectedDeliveryDate = new DateTime(2024, 11, 10, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5127),
                            IsRefrigerated = false,
                            Kilometers = 1000.0,
                            PickupAddress = "789 Pickup Ave.",
                            PickupLatitude = 40.712800000000001,
                            PickupLongitude = -74.006,
                            SharedTruck = true,
                            SpecialInstructions = "Keep dry",
                            StandartCargoId = 0,
                            Status = "Accepted",
                            TotalVolume = 20.0,
                            TotalWeight = 500.0,
                            Type = "International",
                            TypeOfGoods = "Furniture"
                        },
                        new
                        {
                            Id = 3,
                            ApproximatePrice = 2000m,
                            CalculatedPrice = 1900m,
                            CargoType = "Non-Standard",
                            ClientCompanyId = 1,
                            CreatedAt = new DateTime(2024, 10, 31, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5141),
                            DeliveryAddress = "25 Factory Rd.",
                            DeliveryLatitude = 36.778300000000002,
                            DeliveryLongitude = -119.4179,
                            ExpectedDeliveryDate = new DateTime(2024, 11, 15, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5139),
                            IsRefrigerated = false,
                            Kilometers = 2000.0,
                            PickupAddress = "15 Industrial Blvd.",
                            PickupLatitude = 34.052199999999999,
                            PickupLongitude = -118.2437,
                            SharedTruck = false,
                            SpecialInstructions = "Requires crane",
                            StandartCargoId = 0,
                            Status = "Pending",
                            TotalVolume = 50.0,
                            TotalWeight = 2000.0,
                            Type = "Domestic",
                            TypeOfGoods = "Machinery"
                        },
                        new
                        {
                            Id = 4,
                            ApproximatePrice = 350m,
                            CalculatedPrice = 340m,
                            CargoType = "Standard",
                            ClientCompanyId = 1,
                            CreatedAt = new DateTime(2024, 10, 31, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5159),
                            DeliveryAddress = "Warehouse 23",
                            DeliveryLatitude = 34.746499999999997,
                            DeliveryLongitude = -92.289599999999993,
                            ExpectedDeliveryDate = new DateTime(2024, 11, 3, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5158),
                            IsRefrigerated = false,
                            Kilometers = 500.0,
                            PickupAddress = "Market Square 9",
                            PickupLatitude = 33.749000000000002,
                            PickupLongitude = -84.388000000000005,
                            SharedTruck = true,
                            SpecialInstructions = "Do not compress",
                            StandartCargoId = 0,
                            Status = "Pending",
                            TotalVolume = 8.0,
                            TotalWeight = 150.0,
                            Type = "Domestic",
                            TypeOfGoods = "Textiles"
                        },
                        new
                        {
                            Id = 5,
                            ApproximatePrice = 220m,
                            CalculatedPrice = 210m,
                            CargoType = "Standard",
                            ClientCompanyId = 1,
                            CreatedAt = new DateTime(2024, 10, 31, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5169),
                            DeliveryAddress = "Learning Center",
                            DeliveryLatitude = 38.907200000000003,
                            DeliveryLongitude = -77.036900000000003,
                            ExpectedDeliveryDate = new DateTime(2024, 11, 4, 15, 45, 10, 204, DateTimeKind.Local).AddTicks(5167),
                            IsRefrigerated = false,
                            Kilometers = 1000.0,
                            PickupAddress = "Library Lane",
                            PickupLatitude = 40.712800000000001,
                            PickupLongitude = -74.006,
                            SharedTruck = false,
                            SpecialInstructions = "Fragile binding",
                            StandartCargoId = 0,
                            Status = "Pending",
                            TotalVolume = 1.8,
                            TotalWeight = 300.0,
                            Type = "International",
                            TypeOfGoods = "Books"
                        });
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Vehicle identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ArePalletsStackable")
                        .HasColumnType("bit")
                        .HasComment("Are the pallets stackable");

                    b.Property<decimal>("ContantsExpenses")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Vehicle's constant expences");

                    b.Property<int>("EuroPalletCapacity")
                        .HasColumnType("int")
                        .HasComment("Euro pallets capacity");

                    b.Property<double>("FuelConsumptionPer100Km")
                        .HasColumnType("float")
                        .HasComment("Fuel consumption per 100 km");

                    b.Property<double>("Height")
                        .HasColumnType("float")
                        .HasComment("Vehicle height");

                    b.Property<int>("IndustrialPalletCapacity")
                        .HasColumnType("int")
                        .HasComment("Industrial pallets capacity");

                    b.Property<double>("KilometersDriven")
                        .HasColumnType("float")
                        .HasComment("Kilometers driven");

                    b.Property<double>("KilometersLeftToChangeParts")
                        .HasColumnType("float")
                        .HasComment("Kilometers left to change parts");

                    b.Property<DateTime>("LastYearMaintenance")
                        .HasColumnType("datetime2")
                        .HasComment("Maintenance due date");

                    b.Property<double>("Length")
                        .HasColumnType("float")
                        .HasComment("Vehicle length");

                    b.Property<double>("MaxWeightCapacity")
                        .HasColumnType("float")
                        .HasComment("Max weight capacity");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Vehicle's purchase price");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasComment("Vehicle registration number");

                    b.Property<string>("VehicleStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Vehicle status");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Vehicle type");

                    b.Property<double>("Volume")
                        .HasColumnType("float")
                        .HasComment("Vehicle volume");

                    b.Property<double>("Width")
                        .HasColumnType("float")
                        .HasComment("Vehicle width");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasComment("Vehicle Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArePalletsStackable = true,
                            ContantsExpenses = 5000.0m,
                            EuroPalletCapacity = 33,
                            FuelConsumptionPer100Km = 12.5,
                            Height = 2.7999999999999998,
                            IndustrialPalletCapacity = 20,
                            KilometersDriven = 150000.0,
                            KilometersLeftToChangeParts = 50000.0,
                            LastYearMaintenance = new DateTime(2024, 7, 31, 15, 45, 10, 970, DateTimeKind.Local).AddTicks(8100),
                            Length = 12.0,
                            MaxWeightCapacity = 18000.0,
                            PurchasePrice = 75000.0m,
                            RegistrationNumber = "ABC123",
                            VehicleStatus = "Available",
                            VehicleType = "Truck",
                            Volume = 84.0,
                            Width = 2.5
                        },
                        new
                        {
                            Id = 2,
                            ArePalletsStackable = false,
                            ContantsExpenses = 2000.0m,
                            EuroPalletCapacity = 10,
                            FuelConsumptionPer100Km = 8.0,
                            Height = 2.5,
                            IndustrialPalletCapacity = 8,
                            KilometersDriven = 90000.0,
                            KilometersLeftToChangeParts = 30000.0,
                            LastYearMaintenance = new DateTime(2024, 9, 30, 15, 45, 10, 970, DateTimeKind.Local).AddTicks(8103),
                            Length = 6.0,
                            MaxWeightCapacity = 3500.0,
                            PurchasePrice = 25000.0m,
                            RegistrationNumber = "XYZ789",
                            VehicleStatus = "Available",
                            VehicleType = "Van",
                            Volume = 30.0,
                            Width = 2.0
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Calendar Event identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientCompanyId")
                        .HasColumnType("int")
                        .HasComment("Client Company identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Event Type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Title");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.ToTable("CalendarEvents");

                    b.HasComment("Calendar Event Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientCompanyId = 1,
                            Date = new DateTime(2024, 9, 30, 15, 45, 10, 995, DateTimeKind.Local).AddTicks(5173),
                            EventType = "Paid",
                            Title = "Monthly Payment Due"
                        },
                        new
                        {
                            Id = 2,
                            ClientCompanyId = 1,
                            Date = new DateTime(2024, 7, 31, 15, 45, 10, 995, DateTimeKind.Local).AddTicks(5175),
                            EventType = "Paid",
                            Title = "Quarterly Review"
                        },
                        new
                        {
                            Id = 3,
                            ClientCompanyId = 1,
                            Date = new DateTime(2024, 4, 30, 15, 45, 10, 995, DateTimeKind.Local).AddTicks(5177),
                            EventType = "Delivered",
                            Title = "Annual Delivery Milestone"
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.CashRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Cash Register identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Amount of the register");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2")
                        .HasComment("Date submitted");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasComment("Delivery identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the register");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("File identifier in Google drive");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Type of the register");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.ToTable("CashRegisters");

                    b.HasComment("Cash Register Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100.00m,
                            DateSubmitted = new DateTime(2024, 10, 26, 15, 45, 9, 171, DateTimeKind.Local).AddTicks(8725),
                            DeliveryId = 1,
                            Description = "Fuel Expense",
                            FileId = "",
                            Type = "Vehicle Expenses"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 50.00m,
                            DateSubmitted = new DateTime(2024, 10, 27, 15, 45, 9, 171, DateTimeKind.Local).AddTicks(8727),
                            DeliveryId = 1,
                            Description = "Toll Fee",
                            FileId = "",
                            Type = "Vehicle Expenses"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 20.00m,
                            DateSubmitted = new DateTime(2024, 10, 28, 15, 45, 9, 171, DateTimeKind.Local).AddTicks(8728),
                            DeliveryId = 2,
                            Description = "Driver Lunch",
                            FileId = "",
                            Type = "Driver Expenses"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 150.00m,
                            DateSubmitted = new DateTime(2024, 10, 29, 15, 45, 9, 171, DateTimeKind.Local).AddTicks(8755),
                            DeliveryId = 3,
                            Description = "Repair Costs",
                            FileId = "",
                            Type = "Vehicle Expenses"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 80.00m,
                            DateSubmitted = new DateTime(2024, 10, 30, 15, 45, 9, 171, DateTimeKind.Local).AddTicks(8757),
                            DeliveryId = 4,
                            Description = "Accommodation",
                            FileId = "",
                            Type = "Driver Expenses"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 40.00m,
                            DateSubmitted = new DateTime(2024, 10, 31, 15, 45, 9, 171, DateTimeKind.Local).AddTicks(8759),
                            DeliveryId = 5,
                            Description = "Miscellaneous",
                            FileId = "",
                            Type = "Other Expenses"
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Delivery identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ActualDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryStep")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasComment("Driver identifier");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasComment("Invoice identifier");

                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Delivery total income");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Delivery reference number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Delivery status");

                    b.Property<decimal>("TotalExpenses")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Delivery total expenses");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasComment("Vehicle identifier");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("IX_Delivery_DriverId");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("IX_Delivery_VehicleId");

                    b.ToTable("Deliveries");

                    b.HasComment("Delivery Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualDeliveryDate = new DateTime(2024, 10, 30, 15, 45, 10, 964, DateTimeKind.Local).AddTicks(6116),
                            DeliveryStep = 2,
                            DriverId = 1,
                            OfferId = 1,
                            Profit = 750.00m,
                            ReferenceNumber = "DEL0001",
                            Status = "In Transit",
                            TotalExpenses = 500.00m,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActualDeliveryDate = new DateTime(2024, 10, 29, 15, 45, 10, 964, DateTimeKind.Local).AddTicks(6121),
                            DeliveryStep = 1,
                            DriverId = 1,
                            OfferId = 2,
                            Profit = 700.00m,
                            ReferenceNumber = "DEL0002",
                            Status = "Booked",
                            TotalExpenses = 450.00m,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActualDeliveryDate = new DateTime(2024, 10, 28, 15, 45, 10, 964, DateTimeKind.Local).AddTicks(6124),
                            DeliveryStep = 4,
                            DriverId = 1,
                            OfferId = 3,
                            Profit = 800.00m,
                            ReferenceNumber = "DEL0003",
                            Status = "Delivered",
                            TotalExpenses = 600.00m,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ActualDeliveryDate = new DateTime(2024, 10, 27, 15, 45, 10, 964, DateTimeKind.Local).AddTicks(6125),
                            DeliveryStep = 2,
                            DriverId = 1,
                            OfferId = 4,
                            Profit = 780.00m,
                            ReferenceNumber = "DEL0004",
                            Status = "In Transit",
                            TotalExpenses = 520.00m,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ActualDeliveryDate = new DateTime(2024, 10, 26, 15, 45, 10, 964, DateTimeKind.Local).AddTicks(6127),
                            DeliveryStep = 3,
                            DriverId = 1,
                            OfferId = 5,
                            Profit = 720.00m,
                            ReferenceNumber = "DEL0005",
                            Status = "Booked",
                            TotalExpenses = 480.00m,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.DeliveryTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasComment("Delivery identifier");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasComment("Driver identifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasComment("Latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasComment("Longitude");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Notes");

                    b.Property<string>("StatusUpdate")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Status update");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("DriverId");

                    b.ToTable("DeliveryTrackings");

                    b.HasComment("Delivery Tracking Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sofia, Bulgaria",
                            DeliveryId = 1,
                            DriverId = 1,
                            Latitude = 42.697699999999998,
                            Longitude = 23.321899999999999,
                            Notes = "Delivery completed successfully.",
                            StatusUpdate = "Delivered",
                            Timestamp = new DateTime(2024, 10, 26, 15, 45, 10, 977, DateTimeKind.Local).AddTicks(406)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Varna, Bulgaria",
                            DeliveryId = 2,
                            DriverId = 1,
                            Latitude = 43.214100000000002,
                            Longitude = 27.9147,
                            Notes = "Delivery scheduled.",
                            StatusUpdate = "Booked",
                            Timestamp = new DateTime(2024, 10, 27, 15, 45, 10, 977, DateTimeKind.Local).AddTicks(408)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Plovdiv, Bulgaria",
                            DeliveryId = 3,
                            DriverId = 1,
                            Latitude = 42.135399999999997,
                            Longitude = 24.7453,
                            Notes = "Delivered on time.",
                            StatusUpdate = "Delivered",
                            Timestamp = new DateTime(2024, 10, 28, 15, 45, 10, 977, DateTimeKind.Local).AddTicks(410)
                        },
                        new
                        {
                            Id = 4,
                            Address = "Kardzhali, Bulgaria",
                            DeliveryId = 4,
                            DriverId = 1,
                            Latitude = 41.632100000000001,
                            Longitude = 25.379000000000001,
                            Notes = "Awaiting driver assignment.",
                            StatusUpdate = "Delivered",
                            Timestamp = new DateTime(2024, 10, 29, 15, 45, 10, 977, DateTimeKind.Local).AddTicks(411)
                        },
                        new
                        {
                            Id = 5,
                            Address = "Burgas, Bulgaria",
                            DeliveryId = 5,
                            DriverId = 1,
                            Latitude = 42.504800000000003,
                            Longitude = 27.462599999999998,
                            Notes = "Package left with neighbor.",
                            StatusUpdate = "Booked",
                            Timestamp = new DateTime(2024, 10, 30, 15, 45, 10, 977, DateTimeKind.Local).AddTicks(415)
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Driver identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Driver's age");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Is driver available");

                    b.Property<DateTime>("LicenseExpiryDate")
                        .HasColumnType("datetime2")
                        .HasComment("Driver's license expiry date");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Driver's license number");

                    b.Property<int>("MonthsOfExperience")
                        .HasColumnType("int")
                        .HasComment("Driver's months of experience");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver's name");

                    b.Property<string>("Preferrences")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Driver's preferrences");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Driver's salary");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("YearOfExperience")
                        .HasColumnType("int")
                        .HasComment("Driver's year of experience");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Drivers");

                    b.HasComment("Driver Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 30,
                            IsAvailable = true,
                            LicenseExpiryDate = new DateTime(2025, 10, 31, 15, 45, 10, 224, DateTimeKind.Local).AddTicks(4394),
                            LicenseNumber = "D12345678",
                            MonthsOfExperience = 6,
                            Name = "John Doe",
                            Preferrences = "No night shifts",
                            Salary = 3000.0m,
                            UserId = "driverUser1",
                            YearOfExperience = 5
                        },
                        new
                        {
                            Id = 2,
                            Age = 28,
                            IsAvailable = false,
                            LicenseExpiryDate = new DateTime(2025, 10, 31, 15, 45, 10, 224, DateTimeKind.Local).AddTicks(4398),
                            LicenseNumber = "D87654321",
                            MonthsOfExperience = 8,
                            Name = "Jane Smith",
                            Preferrences = "Prefers city deliveries",
                            Salary = 3200.0m,
                            UserId = "driverUser2",
                            YearOfExperience = 4
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.FuelPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Fuel Price identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Fuel price");

                    b.HasKey("Id");

                    b.ToTable("FuelPrices");

                    b.HasComment("Fuel Prices Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 10, 28, 15, 45, 10, 989, DateTimeKind.Local).AddTicks(3644),
                            Price = 2.50m
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 10, 29, 15, 45, 10, 989, DateTimeKind.Local).AddTicks(3645),
                            Price = 2.60m
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.NonStandardCargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Non-standard cargo identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Description of the non-standard cargo");

                    b.Property<double>("Height")
                        .HasColumnType("float")
                        .HasComment("Height of the goods");

                    b.Property<double>("Length")
                        .HasColumnType("float")
                        .HasComment("Length of the goods");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasComment("Request identifier");

                    b.Property<double>("Volume")
                        .HasColumnType("float")
                        .HasComment("Volume of the goods");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasComment("Weight of the goods");

                    b.Property<double>("Width")
                        .HasColumnType("float")
                        .HasComment("Width of the goods");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("NonStandardCargos");

                    b.HasComment("Non-Standard Cargo Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Large industrial machine",
                            Height = 150.0,
                            Length = 120.0,
                            RequestId = 3,
                            Volume = 1.8,
                            Weight = 300.0,
                            Width = 100.0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Auxiliary machine part",
                            Height = 80.0,
                            Length = 90.0,
                            RequestId = 3,
                            Volume = 0.59999999999999998,
                            Weight = 120.0,
                            Width = 75.0
                        },
                        new
                        {
                            Id = 3,
                            Description = "High-pressure pump",
                            Height = 100.0,
                            Length = 150.0,
                            RequestId = 3,
                            Volume = 1.2,
                            Weight = 450.0,
                            Width = 80.0
                        },
                        new
                        {
                            Id = 4,
                            Description = "Extra non-standard cargo for Request5",
                            Height = 100.0,
                            Length = 150.0,
                            RequestId = 5,
                            Volume = 1.8,
                            Weight = 300.0,
                            Width = 120.0
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.PricesPerSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Prices per size identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("DomesticPriceForNotSharedTruck")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Domestic price for shared truck");

                    b.Property<decimal>("DomesticPriceForSharedTruck")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Domestic price for shared truck");

                    b.Property<decimal>("InternationalPriceForNotSharedTruck")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("International price for shared truck");

                    b.Property<decimal>("InternationalPriceForSharedTruck")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("International price for shared truck");

                    b.Property<double>("QuotientForDomesticNotSharedTruck")
                        .HasColumnType("float")
                        .HasComment("Quotient for domestic not shared truck");

                    b.Property<double>("QuotientForDomesticSharedTruck")
                        .HasColumnType("float")
                        .HasComment("Quotient for domestic shared truck");

                    b.Property<double>("QuotientForInternationalNotSharedTruck")
                        .HasColumnType("float")
                        .HasComment("Quotient for international not shared truck");

                    b.Property<double>("QuotientForInternationalSharedTruck")
                        .HasColumnType("float")
                        .HasComment("Quotient for international shared truck");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasComment("Vehicle identifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("PricesPerSize");

                    b.HasComment("Prices per size entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DomesticPriceForNotSharedTruck = 1000.0m,
                            DomesticPriceForSharedTruck = 800.0m,
                            InternationalPriceForNotSharedTruck = 1500.0m,
                            InternationalPriceForSharedTruck = 1200.0m,
                            QuotientForDomesticNotSharedTruck = 1.2,
                            QuotientForDomesticSharedTruck = 0.90000000000000002,
                            QuotientForInternationalNotSharedTruck = 1.5,
                            QuotientForInternationalSharedTruck = 1.1000000000000001,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            DomesticPriceForNotSharedTruck = 1100.0m,
                            DomesticPriceForSharedTruck = 850.0m,
                            InternationalPriceForNotSharedTruck = 1600.0m,
                            InternationalPriceForSharedTruck = 1300.0m,
                            QuotientForDomesticNotSharedTruck = 1.3,
                            QuotientForDomesticSharedTruck = 0.84999999999999998,
                            QuotientForInternationalNotSharedTruck = 1.6000000000000001,
                            QuotientForInternationalSharedTruck = 1.2,
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.StandartCargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Standard cargo identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("NumberOfPallets")
                        .HasColumnType("int")
                        .HasComment("Number of pallets");

                    b.Property<double?>("PalletHeight")
                        .HasColumnType("float")
                        .HasComment("Pallet height");

                    b.Property<double?>("PalletLength")
                        .HasColumnType("float")
                        .HasComment("Pallet length");

                    b.Property<double?>("PalletVolume")
                        .HasColumnType("float")
                        .HasComment("Pallet volume");

                    b.Property<double?>("PalletWidth")
                        .HasColumnType("float")
                        .HasComment("Pallet width");

                    b.Property<bool?>("PalletsAreStackable")
                        .HasColumnType("bit")
                        .HasComment("Are the pallets stackable");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasComment("Request identifier");

                    b.Property<string>("TypeOfPallet")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Type of pallet");

                    b.Property<double?>("WeightOfPallets")
                        .HasColumnType("float")
                        .HasComment("Weight of pallets");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("StandartCargos");

                    b.HasComment("Standart Cargo Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NumberOfPallets = 5,
                            PalletHeight = 100.0,
                            PalletLength = 120.0,
                            PalletVolume = 0.95999999999999996,
                            PalletWidth = 80.0,
                            PalletsAreStackable = true,
                            RequestId = 1,
                            TypeOfPallet = "Euro",
                            WeightOfPallets = 500.0
                        },
                        new
                        {
                            Id = 2,
                            NumberOfPallets = 3,
                            PalletHeight = 110.0,
                            PalletLength = 130.0,
                            PalletVolume = 1.29,
                            PalletWidth = 90.0,
                            PalletsAreStackable = false,
                            RequestId = 2,
                            TypeOfPallet = "Industrial",
                            WeightOfPallets = 700.0
                        },
                        new
                        {
                            Id = 3,
                            NumberOfPallets = 4,
                            PalletHeight = 100.0,
                            PalletLength = 120.0,
                            PalletVolume = 0.95999999999999996,
                            PalletWidth = 80.0,
                            PalletsAreStackable = true,
                            RequestId = 4,
                            TypeOfPallet = "Standard",
                            WeightOfPallets = 450.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "99027aaa-d346-4dd9-a467-15d74576c080",
                            ConcurrencyStamp = "838d3307-e6f5-40b5-92bc-c135573cc0a5",
                            Name = "LogisticsCompany",
                            NormalizedName = "LOGISTICSCOMPANY"
                        },
                        new
                        {
                            Id = "5d000e64-c056-419a-950f-1992bd1e910d",
                            ConcurrencyStamp = "c233e827-2dc7-47e5-8b21-829211c66158",
                            Name = "ClientCompany",
                            NormalizedName = "CLIENTCOMPANY"
                        },
                        new
                        {
                            Id = "20ddc22c-ca6d-4feb-a688-0f31a430b5eb",
                            ConcurrencyStamp = "1ad87b54-705e-4d25-b911-b5de37d4fb86",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "27609f35-fbc8-4dc4-9d12-7ff2dd400327",
                            ConcurrencyStamp = "a64be1a0-7ef2-4ae2-996c-44fe07634f4c",
                            Name = "Speditor",
                            NormalizedName = "SPEDITOR"
                        },
                        new
                        {
                            Id = "350868c0-bf0f-4f70-b4c9-155351bc6429",
                            ConcurrencyStamp = "111ff830-e4b9-4cf0-9002-c929d4209652",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6bab54d5-5a88-4128-92d2-4d12ad0baa32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5707bda8-43a5-4d04-87b7-dd2cb2eb7b60",
                            Email = "logistics@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEATEuEVAp/I+HPDs58b0H2McT4BEeNjROIvXh+66891QPR7ScS5daShs2j0KLn0e7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2e9d3db-1707-46bc-be57-2d65e3f95847",
                            TwoFactorEnabled = false,
                            UserName = "logistics"
                        },
                        new
                        {
                            Id = "20450cff-816f-49c8-9546-1c603aec0301",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1777f374-43f3-4d52-a7cf-35f0bed5b45b",
                            Email = "clientcompany1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJrR4YP0sclQYrYKAjjPHVFYnTh4U+F/LiOU1rI2feas8bs9vituj5H1uI/CiQ0Gjw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee9b26a0-117e-447e-ba6c-f308c2ef2d65",
                            TwoFactorEnabled = false,
                            UserName = "clientcompany1"
                        },
                        new
                        {
                            Id = "38ba6810-2800-4ac8-b005-5c27e8248951",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fe2543c-42a9-4b25-9d30-2a44968b89e8",
                            Email = "secretary@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJYETUsjK5RHZgHp6oiHqQNayHu6C18a+m053q1Iqwm0sQ9/SEsRHoR+/t6/YuPF0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afd4caf7-e030-4b7e-8f17-1f1bb8f828f9",
                            TwoFactorEnabled = false,
                            UserName = "secretary"
                        },
                        new
                        {
                            Id = "2e8be95a-186e-403b-b4aa-3874750a3563",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05b135f1-7436-47c1-ab05-d3400fc5aee7",
                            Email = "speditor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEL85qk4IcKpq3YVfEfHCXO5fWqLxkxbZlTx+GQ7V17LX+xVMl/C0UYLiP9iZou8xxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c96ce24-69e0-4cff-aedc-2587749cce83",
                            TwoFactorEnabled = false,
                            UserName = "speditor"
                        },
                        new
                        {
                            Id = "driverUser1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4a1f9b5-c45b-4e09-92f9-d9dea4e2cd71",
                            Email = "driver1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER1@EXAMPLE.COM",
                            NormalizedUserName = "DRIVER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFXeeYM2YUs8S+ov8QN4cYhugspiL2lzQmsIrRaAe8xdyQA9kAn+Y++P483wOT5gyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b0139c3-ba64-49be-9a5b-a2c8788ec144",
                            TwoFactorEnabled = false,
                            UserName = "driver1@example.com"
                        },
                        new
                        {
                            Id = "driverUser2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc20c0bc-a30c-43a7-914b-33915a1e155f",
                            Email = "driver2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER2@EXAMPLE.COM",
                            NormalizedUserName = "DRIVER2@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70e12973-286c-458d-8639-7a92e40c2006",
                            TwoFactorEnabled = false,
                            UserName = "driver2@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6bab54d5-5a88-4128-92d2-4d12ad0baa32",
                            RoleId = "99027aaa-d346-4dd9-a467-15d74576c080"
                        },
                        new
                        {
                            UserId = "20450cff-816f-49c8-9546-1c603aec0301",
                            RoleId = "5d000e64-c056-419a-950f-1992bd1e910d"
                        },
                        new
                        {
                            UserId = "38ba6810-2800-4ac8-b005-5c27e8248951",
                            RoleId = "20ddc22c-ca6d-4feb-a688-0f31a430b5eb"
                        },
                        new
                        {
                            UserId = "2e8be95a-186e-403b-b4aa-3874750a3563",
                            RoleId = "27609f35-fbc8-4dc4-9d12-7ff2dd400327"
                        },
                        new
                        {
                            UserId = "driverUser1",
                            RoleId = "350868c0-bf0f-4f70-b4c9-155351bc6429"
                        },
                        new
                        {
                            UserId = "driverUser2",
                            RoleId = "350868c0-bf0f-4f70-b4c9-155351bc6429"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Invoice", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", null)
                        .WithMany("Invoices")
                        .HasForeignKey("ClientCompanyId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LogiTrack.Infrastructure.Data.DataModels.Delivery", "Delivery")
                        .WithOne("Invoice")
                        .HasForeignKey("LogisticsSystem.Infrastructure.Data.DataModels.Invoice", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Offer", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", null)
                        .WithMany("Offers")
                        .HasForeignKey("ClientCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Request", "Request")
                        .WithOne("Offer")
                        .HasForeignKey("LogisticsSystem.Infrastructure.Data.DataModels.Offer", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Request", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", "ClientCompany")
                        .WithMany("Requests")
                        .HasForeignKey("ClientCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientCompany");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.CalendarEvent", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", "ClientCompany")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("ClientCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientCompany");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.CashRegister", b =>
                {
                    b.HasOne("LogiTrack.Infrastructure.Data.DataModels.Delivery", "Delivery")
                        .WithMany("CashRegisters")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Delivery", b =>
                {
                    b.HasOne("LogiTrack.Infrastructure.Data.DataModels.Driver", "Driver")
                        .WithMany("Deliveries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Offer", "Offer")
                        .WithOne("Delivery")
                        .HasForeignKey("LogiTrack.Infrastructure.Data.DataModels.Delivery", "OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Vehicle", "Vehicle")
                        .WithMany("Deliveries")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Offer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.DeliveryTracking", b =>
                {
                    b.HasOne("LogiTrack.Infrastructure.Data.DataModels.Delivery", "Delivery")
                        .WithMany("DeliveryTrackings")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogiTrack.Infrastructure.Data.DataModels.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Driver", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("LogiTrack.Infrastructure.Data.DataModels.Driver", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.NonStandardCargo", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Request", "Request")
                        .WithMany("NonStandardCargos")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.PricesPerSize", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("LogiTrack.Infrastructure.Data.DataModels.PricesPerSize", "VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.StandartCargo", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Request", "Request")
                        .WithOne("StandartCargo")
                        .HasForeignKey("LogiTrack.Infrastructure.Data.DataModels.StandartCargo", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", b =>
                {
                    b.Navigation("CalendarEvents");

                    b.Navigation("Invoices");

                    b.Navigation("Offers");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Offer", b =>
                {
                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Request", b =>
                {
                    b.Navigation("NonStandardCargos");

                    b.Navigation("Offer");

                    b.Navigation("StandartCargo");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Vehicle", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Delivery", b =>
                {
                    b.Navigation("CashRegisters");

                    b.Navigation("DeliveryTrackings");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Driver", b =>
                {
                    b.Navigation("Deliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
