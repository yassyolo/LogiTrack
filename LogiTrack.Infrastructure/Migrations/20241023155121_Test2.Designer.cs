// <auto-generated />
using System;
using LogiTrack.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogiTrack.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241023155121_Test2")]
    partial class Test2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlternativePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Company's alternative phone number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Company's city");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Person whom we are contacting");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Company's country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Registration created at");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Company's industry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Company Name");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Company's postal code");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasComment("Company's registration number");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Company's registration status");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Company's address");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ClientCompanies");

                    b.HasComment("Client Company Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlternativePhoneNumber = "1234567891",
                            City = "Sliven",
                            ContactPerson = "John Doe",
                            Country = "Bulgaria",
                            CreatedAt = new DateTime(2024, 10, 3, 18, 51, 19, 730, DateTimeKind.Local).AddTicks(9009),
                            Industry = "Manufacturing",
                            Name = "Client Company 1",
                            PostalCode = "8800",
                            RegistrationNumber = "REG123456",
                            RegistrationStatus = "Approved",
                            Street = "Sini kamani 28",
                            UserId = "20450cff-816f-49c8-9546-1c603aec0301"
                        },
                        new
                        {
                            Id = 2,
                            AlternativePhoneNumber = "9876543210",
                            City = "Sofia",
                            ContactPerson = "Jane Smith",
                            Country = "Bulgaria",
                            CreatedAt = new DateTime(2024, 10, 13, 18, 51, 19, 730, DateTimeKind.Local).AddTicks(9060),
                            Industry = "Fashion",
                            Name = "Client Company 2",
                            PostalCode = "1000",
                            RegistrationNumber = "REG654321",
                            RegistrationStatus = "Pending",
                            Street = "Osogovo 5a"
                        });
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("Invoice identifier");

                    b.Property<int?>("ClientCompanyId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2")
                        .HasComment("Invoice date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Invoice number");

                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId1");

                    b.ToTable("Invoices");

                    b.HasComment("Invoice Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InvoiceDate = new DateTime(2024, 10, 23, 15, 51, 20, 302, DateTimeKind.Utc).AddTicks(2772),
                            InvoiceNumber = "INV-2024-0001",
                            OfferId = 1
                        });
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClientCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int")
                        .HasComment("Delivery identifier");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Company identifier");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasComment("Invoice identifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Notes for the offer");

                    b.Property<DateTime>("OfferDate")
                        .HasColumnType("datetime2")
                        .HasComment("Offer date");

                    b.Property<string>("OfferStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Offer status");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasComment("Request identifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.HasIndex("DeliveryId")
                        .HasDatabaseName("IX_Offer_DeliveryId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasDatabaseName("IX_Offer_RequestId");

                    b.ToTable("Offers");

                    b.HasComment("Offer Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FinalPrice = 4800m,
                            Notes = "Confirmed by client",
                            OfferDate = new DateTime(2024, 10, 22, 15, 51, 20, 306, DateTimeKind.Utc).AddTicks(2755),
                            OfferStatus = "Accepted",
                            RequestId = 1
                        });
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Request identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("ApproximatePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Approximate price given by the company");

                    b.Property<decimal>("CalculatedPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Automatically calculated price");

                    b.Property<string>("CargoType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Cargo type");

                    b.Property<int>("ClientCompanyId")
                        .HasColumnType("int")
                        .HasComment("Client Company identifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Delivery address");

                    b.Property<double>("DeliveryLatitude")
                        .HasColumnType("float")
                        .HasComment("Delivery address latitude");

                    b.Property<double>("DeliveryLongitude")
                        .HasColumnType("float")
                        .HasComment("Delivery address longitude");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2")
                        .HasComment("Expected delivery date");

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasComment("Height of the goods");

                    b.Property<bool>("IsRefrigerated")
                        .HasColumnType("bit")
                        .HasComment("Is the cargo refrigerated");

                    b.Property<int?>("Length")
                        .HasColumnType("int")
                        .HasComment("Length of the goods");

                    b.Property<int?>("NumberOfNonStandartGoods")
                        .HasColumnType("int")
                        .HasComment("Number of non-standart goods");

                    b.Property<int?>("NumberOfPallets")
                        .HasColumnType("int")
                        .HasComment("Number of pallets");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    b.Property<double?>("PalletHeight")
                        .HasColumnType("float")
                        .HasComment("Pallet height");

                    b.Property<double?>("PalletLength")
                        .HasColumnType("float")
                        .HasComment("Pallet length");

                    b.Property<double?>("PalletVolume")
                        .HasColumnType("float")
                        .HasComment("Pallet volume");

                    b.Property<double?>("PalletWidth")
                        .HasColumnType("float")
                        .HasComment("Pallet width");

                    b.Property<bool?>("PalletsAreStackable")
                        .HasColumnType("bit")
                        .HasComment("Are the pallets stackable");

                    b.Property<string>("PickupAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Pickup address");

                    b.Property<double>("PickupLatitude")
                        .HasColumnType("float")
                        .HasComment("Pickup address latitude");

                    b.Property<double>("PickupLongitude")
                        .HasColumnType("float")
                        .HasComment("Pickup address longitude");

                    b.Property<bool>("SharedTruck")
                        .HasColumnType("bit")
                        .HasComment("Will the vehicle be shared or no");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Special instructions");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Status of the request");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Type of the request");

                    b.Property<string>("TypeOfGoods")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type of goods");

                    b.Property<string>("TypeOfPallet")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Type of pallet");

                    b.Property<double?>("Volume")
                        .HasColumnType("float")
                        .HasComment("Volume of the goods");

                    b.Property<double?>("Weight")
                        .HasColumnType("float")
                        .HasComment("Weight of the goods");

                    b.Property<double?>("WeightOfPallets")
                        .HasColumnType("float")
                        .HasComment("Weight of pallets");

                    b.Property<int?>("Width")
                        .HasColumnType("int")
                        .HasComment("Width of the goods");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.ToTable("Requests");

                    b.HasComment("Request Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApproximatePrice = 2000.00m,
                            CalculatedPrice = 2100.00m,
                            CargoType = "Standard",
                            ClientCompanyId = 1,
                            CreatedAt = new DateTime(2024, 10, 23, 18, 51, 20, 313, DateTimeKind.Local).AddTicks(1682),
                            DeliveryAddress = "",
                            DeliveryLatitude = 48.8566,
                            DeliveryLongitude = 2.3521999999999998,
                            ExpectedDeliveryDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRefrigerated = true,
                            NumberOfPallets = 10,
                            PalletHeight = 144.0,
                            PalletLength = 120.0,
                            PalletVolume = 1.3824000000000001,
                            PalletWidth = 80.0,
                            PalletsAreStackable = true,
                            PickupAddress = "",
                            PickupLatitude = 42.681199999999997,
                            PickupLongitude = 26.3187,
                            SharedTruck = false,
                            SpecialInstructions = "Handle with care",
                            Status = "Approved",
                            Type = "International",
                            TypeOfGoods = "Electronics",
                            TypeOfPallet = "Euro",
                            WeightOfPallets = 500.0
                        },
                        new
                        {
                            Id = 2,
                            ApproximatePrice = 1500.00m,
                            CalculatedPrice = 1550.00m,
                            CargoType = "Standard",
                            ClientCompanyId = 1,
                            CreatedAt = new DateTime(2024, 10, 23, 18, 51, 20, 313, DateTimeKind.Local).AddTicks(1716),
                            DeliveryAddress = "",
                            DeliveryLatitude = 42.697699999999998,
                            DeliveryLongitude = 23.321899999999999,
                            ExpectedDeliveryDate = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRefrigerated = true,
                            NumberOfPallets = 15,
                            PalletHeight = 160.0,
                            PalletLength = 120.0,
                            PalletVolume = 1.536,
                            PalletWidth = 80.0,
                            PalletsAreStackable = true,
                            PickupAddress = "",
                            PickupLatitude = 42.681199999999997,
                            PickupLongitude = 26.3187,
                            SharedTruck = false,
                            SpecialInstructions = "Keep refrigerated",
                            Status = "pending",
                            Type = "Domestic",
                            TypeOfGoods = "Food Products",
                            TypeOfPallet = "Euro",
                            WeightOfPallets = 750.0
                        },
                        new
                        {
                            Id = 3,
                            ApproximatePrice = 1800.00m,
                            CalculatedPrice = 1850.00m,
                            CargoType = "Standard",
                            ClientCompanyId = 1,
                            CreatedAt = new DateTime(2024, 10, 23, 18, 51, 20, 313, DateTimeKind.Local).AddTicks(1728),
                            DeliveryAddress = "",
                            DeliveryLatitude = 48.208199999999998,
                            DeliveryLongitude = 16.373799999999999,
                            ExpectedDeliveryDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRefrigerated = false,
                            NumberOfPallets = 8,
                            PalletHeight = 150.0,
                            PalletLength = 120.0,
                            PalletVolume = 1.8,
                            PalletWidth = 100.0,
                            PalletsAreStackable = false,
                            PickupAddress = "",
                            PickupLatitude = 42.681199999999997,
                            PickupLongitude = 26.3187,
                            SharedTruck = true,
                            SpecialInstructions = "Use soft padding",
                            Status = "Pending",
                            Type = "International",
                            TypeOfGoods = "Furniture",
                            TypeOfPallet = "Industrial",
                            WeightOfPallets = 400.0
                        },
                        new
                        {
                            Id = 4,
                            ApproximatePrice = 1700.00m,
                            CalculatedPrice = 1750.00m,
                            CargoType = "Standard",
                            ClientCompanyId = 1,
                            CreatedAt = new DateTime(2024, 10, 23, 18, 51, 20, 313, DateTimeKind.Local).AddTicks(1731),
                            DeliveryAddress = "",
                            DeliveryLatitude = 43.835599999999999,
                            DeliveryLongitude = 25.965699999999998,
                            ExpectedDeliveryDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRefrigerated = false,
                            NumberOfPallets = 12,
                            PalletHeight = 130.0,
                            PalletLength = 120.0,
                            PalletVolume = 1.5600000000000001,
                            PalletWidth = 100.0,
                            PalletsAreStackable = true,
                            PickupAddress = "",
                            PickupLatitude = 42.681199999999997,
                            PickupLongitude = 26.3187,
                            SharedTruck = true,
                            SpecialInstructions = "Avoid moisture",
                            Status = "Pending",
                            Type = "Domestic",
                            TypeOfGoods = "Machinery Parts",
                            TypeOfPallet = "Industrial",
                            WeightOfPallets = 600.0
                        });
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Vehicle identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ArePalletsStackable")
                        .HasColumnType("bit")
                        .HasComment("Are the pallets stackable");

                    b.Property<decimal>("ContantsExpenses")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Vehicle's constant expences");

                    b.Property<int>("EuroPalletCapacity")
                        .HasColumnType("int")
                        .HasComment("Euro pallets capacity");

                    b.Property<double>("FuelConsumptionPer100Km")
                        .HasColumnType("float")
                        .HasComment("Fuel consumption per 100 km");

                    b.Property<double>("Height")
                        .HasColumnType("float")
                        .HasComment("Vehicle height");

                    b.Property<int>("IndustrialPalletCapacity")
                        .HasColumnType("int")
                        .HasComment("Industrial pallets capacity");

                    b.Property<double>("KilometersDriven")
                        .HasColumnType("float")
                        .HasComment("Kilometers driven");

                    b.Property<double>("KilometersLeftToChangeParts")
                        .HasColumnType("float")
                        .HasComment("Kilometers left to change parts");

                    b.Property<DateTime>("LastYearMaintenance")
                        .HasColumnType("datetime2")
                        .HasComment("Maintenance due date");

                    b.Property<double>("Length")
                        .HasColumnType("float")
                        .HasComment("Vehicle length");

                    b.Property<double>("MaxWeightCapacity")
                        .HasColumnType("float")
                        .HasComment("Max weight capacity");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Vehicle's purchase price");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasComment("Vehicle registration number");

                    b.Property<string>("VehicleStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Vehicle status");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Vehicle type");

                    b.Property<double>("Volume")
                        .HasColumnType("float")
                        .HasComment("Vehicle volume");

                    b.Property<double>("Width")
                        .HasColumnType("float")
                        .HasComment("Vehicle width");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasComment("Vehicle Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArePalletsStackable = true,
                            ContantsExpenses = 0m,
                            EuroPalletCapacity = 10,
                            FuelConsumptionPer100Km = 28.5,
                            Height = 2.6000000000000001,
                            IndustrialPalletCapacity = 8,
                            KilometersDriven = 0.0,
                            KilometersLeftToChangeParts = 0.0,
                            LastYearMaintenance = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 7.5,
                            MaxWeightCapacity = 10000.0,
                            PurchasePrice = 0m,
                            RegistrationNumber = "BG1234RE",
                            VehicleStatus = "Not Available",
                            VehicleType = "Refrigerated Truck",
                            Volume = 48.75,
                            Width = 2.5
                        },
                        new
                        {
                            Id = 2,
                            ArePalletsStackable = true,
                            ContantsExpenses = 0m,
                            EuroPalletCapacity = 33,
                            FuelConsumptionPer100Km = 32.0,
                            Height = 2.7000000000000002,
                            IndustrialPalletCapacity = 26,
                            KilometersDriven = 0.0,
                            KilometersLeftToChangeParts = 0.0,
                            LastYearMaintenance = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 13.6,
                            MaxWeightCapacity = 24000.0,
                            PurchasePrice = 0m,
                            RegistrationNumber = "BG5678TT",
                            VehicleStatus = "Available",
                            VehicleType = "Tent Truck",
                            Volume = 91.799999999999997,
                            Width = 2.5
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Calendar Event identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientCompanyId")
                        .HasColumnType("int")
                        .HasComment("Client Company identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Event Type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Title");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.ToTable("CalendarEvents");

                    b.HasComment("Calendar Event Entity");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.CashRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Cash Register identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Amount of the register");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2")
                        .HasComment("Date submitted");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasComment("Delivery identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the register");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("File identifier in Google drive");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Type of the register");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.ToTable("CashRegisters");

                    b.HasComment("Cash Register Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 200m,
                            DateSubmitted = new DateTime(2024, 10, 23, 15, 51, 19, 726, DateTimeKind.Utc).AddTicks(1719),
                            DeliveryId = 1,
                            Description = "Fuel cost",
                            FileId = "",
                            Type = "Expense"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 50m,
                            DateSubmitted = new DateTime(2024, 10, 23, 15, 51, 19, 726, DateTimeKind.Utc).AddTicks(1720),
                            DeliveryId = 1,
                            Description = "Toll fee",
                            FileId = "",
                            Type = "Expense"
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Delivery identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasComment("Driver identifier");

                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Delivery total income");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Delivery reference number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Delivery status");

                    b.Property<decimal>("TotalExpenses")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Delivery total expenses");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasComment("Vehicle identifier");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("IX_Delivery_DriverId");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("IX_Delivery_VehicleId");

                    b.ToTable("Deliveries");

                    b.HasComment("Delivery Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DriverId = 1,
                            OfferId = 1,
                            Profit = 4300m,
                            ReferenceNumber = "REF-2024-0001",
                            Status = "In Progress",
                            TotalExpenses = 500m,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.DeliveryTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasComment("Delivery identifier");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasComment("Driver identifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasComment("Latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasComment("Longitude");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Notes");

                    b.Property<string>("StatusUpdate")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Status update");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("DriverId");

                    b.ToTable("DeliveryTrackings");

                    b.HasComment("Delivery Tracking Entity");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Driver identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Driver's age");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Is driver available");

                    b.Property<DateTime>("LicenseExpiryDate")
                        .HasColumnType("datetime2")
                        .HasComment("Driver's license expiry date");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Driver's license number");

                    b.Property<int>("MonthsOfExperience")
                        .HasColumnType("int")
                        .HasComment("Driver's months of experience");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver's name");

                    b.Property<string>("Preferrences")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Driver's preferrences");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Driver's salary");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("YearOfExperience")
                        .HasColumnType("int")
                        .HasComment("Driver's year of experience");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Drivers");

                    b.HasComment("Driver Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 35,
                            IsAvailable = false,
                            LicenseExpiryDate = new DateTime(2026, 10, 23, 15, 51, 19, 741, DateTimeKind.Utc).AddTicks(3908),
                            LicenseNumber = "DL123456",
                            MonthsOfExperience = 6,
                            Name = "Paul Smith",
                            Preferrences = "Long-distance deliveries",
                            Salary = 3000m,
                            UserId = "2e8be95a-186e-403b-b4aa-3874750a3563",
                            YearOfExperience = 10
                        },
                        new
                        {
                            Id = 2,
                            Age = 32,
                            IsAvailable = true,
                            LicenseExpiryDate = new DateTime(2027, 10, 23, 15, 51, 19, 741, DateTimeKind.Utc).AddTicks(3911),
                            LicenseNumber = "DL654321",
                            MonthsOfExperience = 4,
                            Name = "Mark Driver",
                            Preferrences = "Short-distance deliveries",
                            Salary = 2800m,
                            UserId = "38ba6810-2800-4ac8-b005-5c27e8248951",
                            YearOfExperience = 8
                        });
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.FuelPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Fuel Price identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Fuel price");

                    b.HasKey("Id");

                    b.ToTable("FuelPrices");

                    b.HasComment("Fuel Prices Entity");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.PricesPerSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Prices per size identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("DomesticPriceForNotSharedTruck")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Domestic price for shared truck");

                    b.Property<decimal>("DomesticPriceForSharedTruck")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Domestic price for shared truck");

                    b.Property<decimal>("InternationalPriceForNotSharedTruck")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("International price for shared truck");

                    b.Property<decimal>("InternationalPriceForSharedTruck")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("International price for shared truck");

                    b.Property<double>("QuotientForDomesticNotSharedTruck")
                        .HasColumnType("float")
                        .HasComment("Quotient for domestic not shared truck");

                    b.Property<double>("QuotientForDomesticSharedTruck")
                        .HasColumnType("float")
                        .HasComment("Quotient for domestic shared truck");

                    b.Property<double>("QuotientForInternationalNotSharedTruck")
                        .HasColumnType("float")
                        .HasComment("Quotient for international not shared truck");

                    b.Property<double>("QuotientForInternationalSharedTruck")
                        .HasColumnType("float")
                        .HasComment("Quotient for international shared truck");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasComment("Vehicle identifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("PricesPerSize");

                    b.HasComment("Prices per size entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DomesticPriceForNotSharedTruck = 500m,
                            DomesticPriceForSharedTruck = 300m,
                            InternationalPriceForNotSharedTruck = 1000m,
                            InternationalPriceForSharedTruck = 700m,
                            QuotientForDomesticNotSharedTruck = 0.0,
                            QuotientForDomesticSharedTruck = 0.0,
                            QuotientForInternationalNotSharedTruck = 0.0,
                            QuotientForInternationalSharedTruck = 0.0,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            DomesticPriceForNotSharedTruck = 550m,
                            DomesticPriceForSharedTruck = 320m,
                            InternationalPriceForNotSharedTruck = 1050m,
                            InternationalPriceForSharedTruck = 750m,
                            QuotientForDomesticNotSharedTruck = 0.0,
                            QuotientForDomesticSharedTruck = 0.0,
                            QuotientForInternationalNotSharedTruck = 0.0,
                            QuotientForInternationalSharedTruck = 0.0,
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "99027aaa-d346-4dd9-a467-15d74576c080",
                            ConcurrencyStamp = "27825011-355d-43ff-9cd5-efe30acc6262",
                            Name = "LogisticsCompany",
                            NormalizedName = "LOGISTICSCOMPANY"
                        },
                        new
                        {
                            Id = "5d000e64-c056-419a-950f-1992bd1e910d",
                            ConcurrencyStamp = "64fde655-758b-4ece-9fc7-bf8b5f265287",
                            Name = "ClientCompany",
                            NormalizedName = "CLIENTCOMPANY"
                        },
                        new
                        {
                            Id = "20ddc22c-ca6d-4feb-a688-0f31a430b5eb",
                            ConcurrencyStamp = "038b92dd-dbd1-4bd2-aa13-0e7411dd2bf2",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "27609f35-fbc8-4dc4-9d12-7ff2dd400327",
                            ConcurrencyStamp = "1e152977-d47a-4086-80e2-1d9a23e93462",
                            Name = "Speditor",
                            NormalizedName = "SPEDITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6bab54d5-5a88-4128-92d2-4d12ad0baa32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6498b86-8b49-4a29-bd70-12dda5713f1c",
                            Email = "logistics@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEF2YJMEd81v00dT5cK1ymx6/m2Qqx3zHpJPrWgsBLmvQdZSPXNTCgKtU+AKULIVmrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88c5bea1-813e-4850-a5b8-c3c70d283639",
                            TwoFactorEnabled = false,
                            UserName = "logistics"
                        },
                        new
                        {
                            Id = "20450cff-816f-49c8-9546-1c603aec0301",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ee0ea69-b5d9-4d74-9fb4-1cbd9b6ef42f",
                            Email = "clientcompany1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAED+AaLaIlUt/Ry0sPhcm9Hmoo9B8hNqNi8ZbqFClle3kMF8iHykrYiBSjAl70hav3w==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9246fc06-e781-4e32-a26b-e459b0624598",
                            TwoFactorEnabled = false,
                            UserName = "clientcompany1"
                        },
                        new
                        {
                            Id = "38ba6810-2800-4ac8-b005-5c27e8248951",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "422a4416-972b-40b0-a349-824783847cd9",
                            Email = "secretary@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECOfV7RjKZ7gbXL/MV27aAn0vG3zR+idjdrZqpzqVgmtVIc+LuR1z8eBSnke9pysTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2361f39c-f95f-4042-992a-e5acc71e2f4b",
                            TwoFactorEnabled = false,
                            UserName = "secretary"
                        },
                        new
                        {
                            Id = "2e8be95a-186e-403b-b4aa-3874750a3563",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f13b373-5e00-413a-ab2a-15d3be70f89b",
                            Email = "speditor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKW189JJjoO1sn2D8rJq3OF0eyuufevrdzZDmeh3LenbYhradcpbsuG7SNagGWOj5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6503a8b-96e7-4e3d-a2ea-b8de067213d1",
                            TwoFactorEnabled = false,
                            UserName = "speditor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6bab54d5-5a88-4128-92d2-4d12ad0baa32",
                            RoleId = "99027aaa-d346-4dd9-a467-15d74576c080"
                        },
                        new
                        {
                            UserId = "20450cff-816f-49c8-9546-1c603aec0301",
                            RoleId = "5d000e64-c056-419a-950f-1992bd1e910d"
                        },
                        new
                        {
                            UserId = "38ba6810-2800-4ac8-b005-5c27e8248951",
                            RoleId = "20ddc22c-ca6d-4feb-a688-0f31a430b5eb"
                        },
                        new
                        {
                            UserId = "2e8be95a-186e-403b-b4aa-3874750a3563",
                            RoleId = "27609f35-fbc8-4dc4-9d12-7ff2dd400327"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Invoice", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", null)
                        .WithMany("Invoices")
                        .HasForeignKey("ClientCompanyId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Offer", "Offer")
                        .WithOne("Invoice")
                        .HasForeignKey("LogisticsSystem.Infrastructure.Data.DataModels.Invoice", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Offer", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", null)
                        .WithMany("Offers")
                        .HasForeignKey("ClientCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Request", "Request")
                        .WithOne("Offer")
                        .HasForeignKey("LogisticsSystem.Infrastructure.Data.DataModels.Offer", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Request", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", "ClientCompany")
                        .WithMany("Requests")
                        .HasForeignKey("ClientCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientCompany");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.CalendarEvent", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", "ClientCompany")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("ClientCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientCompany");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.CashRegister", b =>
                {
                    b.HasOne("LogiTrack.Infrastructure.Data.DataModels.Delivery", "Delivery")
                        .WithMany("CashRegisters")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Delivery", b =>
                {
                    b.HasOne("LogiTrack.Infrastructure.Data.DataModels.Driver", "Driver")
                        .WithMany("Deliveries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Offer", "Offer")
                        .WithOne("Delivery")
                        .HasForeignKey("LogiTrack.Infrastructure.Data.DataModels.Delivery", "OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Vehicle", "Vehicle")
                        .WithMany("Deliveries")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Offer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.DeliveryTracking", b =>
                {
                    b.HasOne("LogiTrack.Infrastructure.Data.DataModels.Delivery", "Delivery")
                        .WithMany("DeliveryTrackings")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogiTrack.Infrastructure.Data.DataModels.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Driver", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("LogiTrack.Infrastructure.Data.DataModels.Driver", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.PricesPerSize", b =>
                {
                    b.HasOne("LogisticsSystem.Infrastructure.Data.DataModels.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("LogiTrack.Infrastructure.Data.DataModels.PricesPerSize", "VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.ClientCompany", b =>
                {
                    b.Navigation("CalendarEvents");

                    b.Navigation("Invoices");

                    b.Navigation("Offers");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Offer", b =>
                {
                    b.Navigation("Delivery");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Request", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("LogisticsSystem.Infrastructure.Data.DataModels.Vehicle", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Delivery", b =>
                {
                    b.Navigation("CashRegisters");

                    b.Navigation("DeliveryTrackings");
                });

            modelBuilder.Entity("LogiTrack.Infrastructure.Data.DataModels.Driver", b =>
                {
                    b.Navigation("Deliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
