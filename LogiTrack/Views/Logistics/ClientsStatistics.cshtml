@model LogiTrack.Core.ViewModels.Clients.ClientsStatisticsViewModel
@{
    ViewData["Title"] = "Clients Statistics";
    Layout = "~/Views/Shared/_LogisticsLayout.cshtml";
}

<div class="chart-container">
    <div class="cards-container">
        <div class="card" id="locationCard">
            <div class="card-content">
                <h3>Clients</h3>
                <p><b>@Model.TotalClients</b></p>
            </div>
        </div>
        <div class="card" id="locationCard">
            <div class="card-content">
                <h3>New registrations</h3>
                <p><b>@Model.NewRegistrations</b></p>
            </div>
        </div>
        <div class="card" id="locationCard">
            <div class="card-content">
                <h3>Satisfied clients</h3>
                <p><b>@Model.SatisfiedClients</b></p>
            </div>
        </div>
    </div>

    <div class="first-row">
        <div class="chart-container">
            <h4>Top 10 clients by payment</h4>
            <canvas id="topClientsChart"></canvas>
        </div>
        <div class="chart-container">
            <h4>Top 10 clients by deliveries</h4>
            <canvas id="topClientsByDeliveryVolumeChart"></canvas>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    fetch('/Logistics/GetTop10Clients')
        .then(response => response.json())
        .then(data => {
            const labels = Object.keys(data);
            const payments = Object.values(data);

            new Chart(document.getElementById('topClientsChart'), {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Total Payments',
                        data: payments,
                        backgroundColor: '#FF6384',
                        borderColor: '#FF6384',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            title: { display: true, text: 'Total Payments' }
                        },
                        x: {
                            title: { display: true, text: 'Client Names' }
                        }
                    }
                }
            });
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });
    fetch('/Logistics/GetTop10ClientsByDeliveries')
        .then(response => response.json())
        .then(data => {
            const clientNames = Object.keys(data);
            const deliveryCounts = Object.values(data);

            new Chart(document.getElementById('topClientsByDeliveryVolumeChart'), {
                type: 'bar',
                data: {
                    labels: clientNames,
                    datasets: [{
                        label: 'Delivery Volume',
                        data: deliveryCounts,
                        backgroundColor: '#00aa87',
                        borderColor: '#00aa87',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            title: { display: true, text: 'Number of Deliveries' }
                        },
                        x: {
                            title: { display: true, text: 'Client Names' },
                            ticks: {
                                autoSkip: true,
                                maxRotation: 45,
                                minRotation: 0
                            }
                        }
                    }
                }
            });
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });
</script>



