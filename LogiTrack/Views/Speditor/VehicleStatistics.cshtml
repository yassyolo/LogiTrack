@model LogiTrack.Core.ViewModels.Vehicle.VehicleStatisticsViewmodel
@{
	Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Driver Dashboard</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <script src="~/js/site.js"></script>
    <style>
        .card h3 {
            margin: 0;
            font-size: 1.1rem;
            color: #00aa87;
        }

        .chart-container {
            background-color: white;
            width: 100%;
            max-width: 1100px;
            margin: 0 auto;
        }

        .chart {
            flex: 1;
            max-width: 300px;
            max-height: 400px;
        }

        .monthy-deliveries {
            flex: 1;
            max-width: 500px;
            height: 500px;
            margin-top: 50px;
        }

        .first-row {
            display: flex;
            justify-content: space-between;
            width: 100%;
            max-width: 1000px;
        }

        .chart-container, .delay-time-container {
            padding: 10px;
        }

        h4, .stat-text {
            text-align: center;
            color: #00aa87;
        }

        .delay {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
    </style>

</head>

<body>
    <header class="header">
        <div class="logo-name">
            <div class="company-logo">
                <img src="https://via.placeholder.com/50" alt="Company Logo">
            </div>
            <div class="company-name">LogiTrack</div>
        </div>
        <div class="profile-dropdown">
            <button onclick="toggleDropdown()">
                <i class="bi bi-person-circle"></i>
                <span class="arrow">&#x25BC;</span>
            </button>
            <div class="profile-dropdown-menu" id="profileDropdown">
                <a asp-action="CompanyDetails" asp-controller="Clients">Company details</a>
                <a asp-action="ContactDetails" asp-controller="Clients">Contact details</a>
                <a asp-action="Logout" asp-controller="Home">Logout</a>
            </div>
        </div>
    </header>
    <aside class="sidebar">
        <ul>
            <li>
                <a asp-action="Dashboard" asp-controller="Speditor">
                    <i class="bi bi-house-door"></i> Dashboard
                </a>
            </li>
            <li>
                <a href="#">
                    <i class="bi bi-people"></i> Clients <span class="arrow">></span>
                </a>
                <div class="dropdown-menu">
                    <ul>
                        <li><a asp-action="ClientsRegister" asp-controller="Speditor"><i class="bi bi-journal-text"></i> Clients register</a></li>
                        <li><a asp-action="SearchCompany" asp-controller="Speditor"><i class="bi bi-search"></i> Search</a></li>
                    </ul>
                </div>
            </li>
            <li>
                <a asp-action="FuelPricesRegister" asp-controller="Speditor">
                    <i class="bi bi-droplet"></i> Fuel <span class="arrow">></span>
                </a>
                <div class="dropdown-menu">
                    <ul>
                        <li><a asp-action="AddFuelPrice" asp-controller="Speditor"><i class="bi bi-plus-circle"></i> Add</a></li>
                        <li><a asp-action="FuelPricesRegister" asp-controller="Speditor"><i class="bi bi-card-list"></i> Fuel price register</a></li>
                        <li> <a asp-action="FuelPricesStatistics" asp-controller="Speditor"><i class="bi bi-bar-chart-line"></i> Statistics</a></li>
                    </ul>
                </div>
            </li>
            <li>
                <a asp-action="VehiclesRegister" asp-controller="Speditor">
                    <i class="bi bi-truck"></i> Vehicles <span class="arrow">></span>
                </a>
                <div class="dropdown-menu">
                    <ul>
                        <li><a asp-action="SearchVehicle" asp-controller="Speditor"><i class="bi bi-search"></i> Search</a></li>
                        <li><a asp-action="AddVehicle" asp-controller="Speditor"><i class="bi bi-plus-circle"></i> Add</a></li>
                        <li><a asp-action="VehiclesRegister" asp-controller="Speditor"><i class="bi bi-list-task"></i> Vehicles Register</a></li>
                        <li><a asp-action="VehicleStatistics" asp-controller="Speditor"><i class="bi bi-bar-chart"></i> Statistics</a></li>
                    </ul>
                </div>
            </li>
            <li>
                <a asp-action="DriversRegister" asp-controller="Logistics">
                    <i class="bi bi-person-badge"></i> Drivers <span class="arrow">></span>
                </a>
                <div class="dropdown-menu">
                    <ul>
                        <li><a asp-action="SearchDriver" asp-controller="Speditor"><i class="bi bi-search"></i> Search</a></li>
                        <li><a asp-action="AddDriver" asp-controller="Speditor"><i class="bi bi-plus-circle"></i> Add</a></li>
                        <li><a asp-action="DriversRegister" asp-controller="Speditor"><i class="bi bi-people-fill"></i> Drivers Register</a></li>
                        <li><a asp-action="DriverStatistics" asp-controller="Speditor"><i class="bi bi-bar-chart-line"></i> Statistics</a></li>
                    </ul>
                </div>
            </li>
            <li>
                <a asp-action="RequestsRegister" asp-controller="Speditor">
                    <i class="bi bi-card-list"></i> Requests <span class="arrow">></span>
                </a>
                <div class="dropdown-menu">
                    <ul>
                        <li><a asp-action="GetPendingRequests" asp-controller="Speditor"><i class="bi bi-search"></i> New requests</a></li>
                        <li><a asp-action="SearchRequest" asp-controller="Speditor"><i class="bi bi-search"></i> Search</a></li>
                        <li><a asp-action="RequestsRegister" asp-controller="Speditor"><i class="bi bi-journal"></i> Requests Register</a></li>
                        <li><a asp-action="RequestsStatistics" asp-controller="Speditor"><i class="bi bi-bar-chart"></i> Statistics</a></li>
                    </ul>
                </div>
            </li>
            <li>
                <a asp-action="OffersRegister" asp-controller="Speditor">
                    <i class="bi bi-file-earmark-text"></i> Offers <span class="arrow">></span>
                </a>
                <div class="dropdown-menu">
                    <ul>
                        <li><a asp-action="SearchOffer" asp-controller="Speditor"><i class="bi bi-search"></i> Search</a></li>
                        <li><a asp-action="OffersRegister" asp-controller="Speditor"><i class="bi bi-journal-text"></i> Offers Register</a></li>
                        <li><a asp-action="OfferStatistics" asp-controller="Speditor"><i class="bi bi-bar-chart"></i> Statistics</a></li>
                    </ul>
                </div>
            </li>
            <li>
                <a asp-action="DeliveriesRegister" asp-controller="Speditor">
                    <i class="bi bi-box-seam"></i> Deliveries <span class="arrow">></span>
                </a>
                <div class="dropdown-menu">
                    <ul>
                        <li><a asp-action="SearchDelivery" asp-controller="Speditor"><i class="bi bi-search"></i> Search</a></li>
                        <li><a asp-action="DeliveriesRegister" asp-controller="Speditor"><i class="bi bi-journal"></i> Deliveries Register</a></li>
                        <li><a asp-action="DeliveryStatistics" asp-controller="Speditor"><i class="bi bi-bar-chart"></i> Statistics</a></li>
                    </ul>
                </div>
            </li>
        </ul>
    </aside>

    <div class="main-content">
        <div class="chart-container">
            <div class="cards-container">
                <div class="card" id="locationCard">
                    <div class="card-content">
                        <h3>Total vehicles</h3>
                        <p><b>@Model.TotalVehiclesCount</b></p>
                    </div>
                </div>
                <div class="card" id="locationCard">
                    <div class="card-content">
                        <h3>Refrigerated vehicles</h3>
                        <p><b>@Model.RefrigeratedVehiclesCount</b></p>
                    </div>
                </div>
                <div class="card" id="locationCard">
                    <div class="card-content">
                        <h3>For repairment</h3>
                        <p><b>@Model.VehiclesForRepairment</b></p>
                    </div>
                </div>
                <div class="card" id="locationCard">
                    <div class="card-content">
                        <h3>Total distance</h3>
                        <p><b>@Model.TotalDistanceTravelled KM</b></p>
                    </div>
                </div>
                <div class="card" id="locationCard">
                    <div class="card-content">
                        <h3>Average distance per vehicle</h3>
                        <p><b>@Model.AverageDistancePerVehicle KM</b></p>
                    </div>
                </div>
                <div class="card" id="locationCard">
                    <div class="card-content">
                        <h3>Total fuel consumed</h3>
                        <p><b>@Model.TotalFuelConsumed L</b></p>
                    </div>
                </div>
            </div>
            <div class="first-row">
                <div class="chart-container">
                    <h4>Vehicles for repairment</h4>
                    <canvas id="vehiclesChart" class="chart" style="margin-left:50px;"></canvas>
                </div>
                <div class="chart-container">
                    <h4>Top 10 vehicles by deliveries</h4>
                    <canvas id="topVehiclesChart" class="chart" style="margin-left:50px;"></canvas>
                </div>
            </div>
            <div class="first-row">
                <div class="chart-container">
                    <h4>Top 10 vehicles by aditional cost</h4>
                    <canvas id="topVehiclesByCostChart" class="chart" style="margin-left:50px;"></canvas>
                </div>
                <div class="chart-container">
                    <h4>Top 10 vehicles by aditional cost</h4>
                    <canvas id="topVehiclesByKilometersChart" class="chart" style="margin-left:50px;"></canvas>
                </div>
             </div>
             <div class="first-row">
                <div class="chart-container">
                    <h4>Top 5 vehicles by aditional cost</h4>
                    <canvas id="topVehiclesDueForMaintenanceChart" class="chart" style="margin-left:50px;"></canvas>
                </div>
            <div class="chart-container">
                <h4>Top 5 vehicles by aditional cost</h4>
                    <canvas id="topVehiclesClosestToKilometersChart" class="chart" style="margin-left:50px;"></canvas>
            </div>
            </div>           
        </div>
    </div>

    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        async function fetchVehicles() {
            try {
                const response = await fetch('/Logistics/GetVehiclesForRepairment');
                const data = await response.json();
                const expiringLicenses = data.expiringLicenses || [];

                const ctx = document.getElementById('vehiclesChart').getContext('2d');

                if (expiringLicenses.length === 0) {
                    new Chart(ctx, {
                        type: 'doughnut',
                        data: {
                            labels: ['No vehicles for repairment'],
                            datasets: [{
                                data: [1],
                                backgroundColor: ['#00aa87'],
                                borderColor: ['#7f8c8d'],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            plugins: {
                                tooltip: {
                                    callbacks: {
                                        label: function () {
                                            return 'No vehicles for repairment soon';
                                        }
                                    }
                                },
                                legend: {
                                    display: true,
                                    position: 'top',
                                    labels: {
                                        color: '#333',
                                        font: { size: 14 }
                                    }
                                }
                            }
                        }
                    });
                    return;
                }

                const labels = expiringLicenses.map(vehicle => vehicle.Name);
                const values = expiringLicenses.map(vehicle => {
                    const expirationDate = new Date(vehicle.ExpirationDate);
                    return Math.ceil((expirationDate - new Date()) / (1000 * 60 * 60 * 24)); 
                });

                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: values,
                            backgroundColor: ['#FF6384', '#00aa87', '#ffe135', '#9ee37d', '#45a29e'],
                            borderColor: '#34495e',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (tooltipItem) {
                                        return `${tooltipItem.raw} Days until maintenance`;
                                    }
                                }
                            },
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error fetching vehicles data:', error);
            }
        }

        async function renderTopVehiclesChart() {
            try {
                const response = await fetch('/Logistics/GetTopVehiclesWithMostDeliveries');
                if (!response.ok) {
                    console.error(`Failed to fetch top vehicles: ${response.status}`);
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                const vehicleNames = Object.keys(data);
                const deliveryCounts = Object.values(data);

                const ctx = document.getElementById('topVehiclesChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: vehicleNames,
                        datasets: [{
                            label: 'Number of Deliveries',
                            data: deliveryCounts,
                            backgroundColor: '#FF6384',
                            borderColor: '#FF6384',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'Number of Deliveries' }
                            },
                            x: {
                                title: { display: true, text: 'Vehicle' }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (tooltipItem) {
                                        return `Deliveries: ${tooltipItem.raw}`;
                                    }
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error rendering Top Vehicles Chart:', error);
            }
        }

        async function renderTopVehiclesByAdditionalCostsChart() {
            try {
                const response = await fetch('/Logistics/GetTopVehiclesByAdditionalCosts');
                if (!response.ok) {
                    console.error(`Failed to fetch top vehicles by additional costs: ${response.status}`);
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                const vehicleNames = Object.keys(data);
                const additionalCosts = Object.values(data);

                const ctx = document.getElementById('topVehiclesByCostChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: vehicleNames,
                        datasets: [{
                            label: 'Additional Costs ($)',
                            data: additionalCosts,
                            backgroundColor: '#00aa87',
                            borderColor: '#00aa87',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'Total Additional Cost ($)' }
                            },
                            x: {
                                title: { display: true, text: 'Vehicles' }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (tooltipItem) {
                                        return `Cost: $${tooltipItem.raw.toFixed(2)}`;
                                    }
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error rendering Top Vehicles by Additional Costs Chart:', error);
            }
        }

        async function renderTopVehiclesByKilometersChart() {
            try {
                const response = await fetch('/Logistics/GetTopVehiclesByKilometers');
                if (!response.ok) {
                    console.error(`Failed to fetch top vehicles by kilometers: ${response.status}`);
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                const vehicleNames = Object.keys(data);
                const kilometers = Object.values(data);

                const ctx = document.getElementById('topVehiclesByKilometersChart').getContext('2d');
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: vehicleNames,
                        datasets: [{
                            label: 'Kilometers Driven',
                            data: kilometers,
                            backgroundColor: ['#FF6384', '#00aa87', '#ffe135', '#9ee37d', '#45a29e'],
                            borderColor: '#34495e',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (tooltipItem) {
                                        return `${tooltipItem.label}: ${tooltipItem.raw.toFixed(2)} km`;
                                    }
                                }
                            },
                            legend: { position: 'top' }
                        }
                    }
                });
            } catch (error) {
                console.error('Error rendering Top Vehicles by Kilometers Chart:', error);
            }
        }

        async function renderTopVehiclesDueForMaintenanceChart() {
            try {
                const response = await fetch('/Logistics/GetTopVehiclesDueForMaintenance');
                if (!response.ok) {
                    console.error(`Failed to fetch top vehicles due for maintenance: ${response.status}`);
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                const vehicleNames = Object.keys(data);
                const daysUntilMaintenance = Object.values(data);

                const ctx = document.getElementById('topVehiclesDueForMaintenanceChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: vehicleNames,
                        datasets: [{
                            label: 'Days Until Maintenance',
                            data: daysUntilMaintenance,
                            backgroundColor: '#FF6384',
                            borderColor: '#FF6384',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'Days Until Maintenance' }
                            },
                            x: {
                                title: { display: true, text: 'Vehicles' }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (tooltipItem) {
                                        return `${tooltipItem.raw} Days`;
                                    }
                                }
                            },
                            legend: { display: false }
                        }
                    }
                });
            } catch (error) {
                console.error('Error rendering Top Vehicles Due for Maintenance Chart:', error);
            }
        }
        async function renderTopVehiclesClosestToKilometersChart() {
            try {
                const response = await fetch('/Logistics/GetTopVehiclesClosestToKilometers');
                if (!response.ok) {
                    console.error(`Failed to fetch top vehicles: ${response.status}`);
                    console.error(await response.text());
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();

                const vehicleNames = Object.keys(data);  
                const kilometersDifference = Object.values(data);  

                const ctx = document.getElementById('topVehiclesClosestToKilometersChart').getContext('2d');
                new Chart(ctx, {
                    type: 'pie',  
                    data: {
                        labels: vehicleNames,
                        datasets: [
                            {
                                label: 'Kilometers to Change Parts',
                                data: kilometersDifference,
                                backgroundColor: [
                                    '#FF6384', '#00aa87', '#ffe135', '#9ee37d', '#45a29e'
                                ],  
                                borderColor: '#34495e',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (tooltipItem) {
                                        return `${tooltipItem.label}: ${tooltipItem.raw} km`;
                                    }
                                }
                            },
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error rendering Top Vehicles Closest to Kilometers Chart:', error);
            }
        }
        async function initializeCharts() {
            await renderTopVehiclesChart();
            await fetchVehicles();
            await renderTopVehiclesByAdditionalCostsChart();
            await renderTopVehiclesByKilometersChart();
            await renderTopVehiclesDueForMaintenanceChart();
            await renderTopVehiclesClosestToKilometersChart();
        }

        initializeCharts(); 
    </script>
</body>

</html>